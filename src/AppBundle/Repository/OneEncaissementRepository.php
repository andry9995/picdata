<?php

namespace AppBundle\Repository;

use AppBundle\Entity\Tiers;
use Doctrine\ORM\EntityRepository;
use AppBundle\Entity\OneClientProspect;
use AppBundle\Entity\OneProjet;

/**
 * OneEncaissementRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class OneEncaissementRepository extends EntityRepository
{

    /**
     * @param array $clientProspects
     * @param $exercice
     * @param string $sort
     * @param string $sortOrder
     * @param string $q
     * @param string $period
     * @param string $startperiod
     * @param string $endperiod
     * @param string $stat
     * @return array
     */
    public function getEncaissements(array $clientProspects, $exercice,$sort='echeance', $sortOrder='ASC', $q='', $period='all', $startperiod='', $endperiod='', $stat='all') {
        $qb = $this->createQueryBuilder('enc');

        $qb->where('enc.tiers in (:clientProspects)')
            ->setParameter('clientProspects', array_values($clientProspects));

        $qb->andWhere('enc.exercice = :exercice')
            ->setParameter('exercice', $exercice);

        //Recherche mot clé
        if ($q !== '') {
            $qb->andWhere($qb->expr()->orX(
                $qb->expr()->like('enc.code', ':q')
            ))
                ->setParameter(':q', '%'.$q.'%');
        }

        //Stat
        if ($stat === 'deposit') {
            $status = 1;
            $qb->andWhere($qb->expr()->eq('enc.status', ':status'));
            $qb->setParameter(':status', $status);
        } elseif ($stat === 'undeposit') {
            $status = 0;
            $qb->andWhere($qb->expr()->eq('enc.status', ':status'));
            $qb->setParameter(':status', $status);
        }

        //Période
        if ($period !== 'all') {
            if ($startperiod !== '' && $endperiod !== '') {
                if ($sort === 'datecreation') {
                    $qb->andWhere('enc.creeLe >= :startperiod');
                    $qb->andWhere('enc.creeLe <= :endperiod');
                } else {
                    $qb->andWhere('enc.dateEncaissement >= :startperiod');
                    $qb->andWhere('enc.dateEncaissement <= :endperiod');
                }

                $dateStartArray = explode('/', $startperiod);
                $dateStartPeriode = null;
                if(count($dateStartArray) === 3) {
                    $dateStartPeriode = new \DateTime("$dateStartArray[2]-$dateStartArray[1]-$dateStartArray[0]");
                }

                $dateEndArray = explode('/', $endperiod);
                $dateEndPeriode = null;
                if(count($dateEndArray) === 3) {
                    $dateEndPeriode = new \DateTime("$dateEndArray[2]-$dateEndArray[1]-$dateEndArray[0]");
                }

                $qb->setParameter(':startperiod',$dateStartPeriode);
                $qb->setParameter(':endperiod', $dateEndPeriode);
            }
        }

        //Tri
        if ($sort === 'datecreation') {
            $qb->orderBy('enc.creeLe', $sortOrder);
        } else {
            $qb->orderBy('enc.dateEncaissement', $sortOrder);
        }

        return $qb->getQuery()
            ->getResult();
    }

    /**
     * Récupération des encaissement d'un client
     * @param Tiers $clientProspect
     * @param $exercice
     * @param $type
     * @param string $sort
     * @param string $sortOrder
     * @param string $q
     * @param string $period
     * @param string $startperiod
     * @param string $endperiod
     * @return array
     */
    public function getEncaissementsByClient(Tiers $clientProspect, $exercice, $type, $sort='echeance', $sortOrder='ASC', $q='', $period='all', $startperiod='', $endperiod='') {
        $qb = $this->createQueryBuilder('enc');
        $qb->where('enc.tiers = :cpid')
                ->setParameter('cpid', $clientProspect->getId());

        $qb->andWhere('enc.exercice = :exercice')
            ->setParameter('exercice', $exercice);
        
        //Recherche mot clé
        if ($q != '' && ($type === 'all' || $type === 'encaissement')) {
            $qb->andWhere($qb->expr()->orX(
                    $qb->expr()->like('enc.code', ':q')
                    ))
                    ->setParameter(':q', '%'.$q.'%');
        }
        
        //Période
        if ($period !== 'all' && ($type === 'all' || $type === 'encaissement')) {
            if ($startperiod !== '' && $endperiod !== '') {
                if ($sort === 'datecreation') {
                    $qb->andWhere('enc.creeLe >= startperiod');
                    $qb->andWhere('enc.creeLe <= endperiod');
                } else {
                    $qb->andWhere('enc.dateEncaissement >= startperiod');
                    $qb->andWhere('enc.dateEncaissement <= endperiod');
                }

                $dateStartArray = explode('/', $startperiod);
                $dateStartPeriode = null;
                if(count($dateStartArray) === 3) {
                    $dateStartPeriode = new \DateTime("$dateStartArray[2]-$dateStartArray[1]-$dateStartArray[0]");
                }

                $dateEndArray = explode('/', $endperiod);
                $dateEndPeriode = null;
                if(count($dateEndArray) === 3) {
                    $dateEndPeriode = new \DateTime("$dateEndArray[2]-$dateEndArray[1]-$dateEndArray[0]");
                }

                $qb->setParameter(':startperiod',$dateStartPeriode);
                $qb->setParameter(':endperiod', $dateEndPeriode);

            }
        }
        
        //Tri
        if ($sort === 'datecreation') {
            $qb->orderBy('enc.creeLe', $sortOrder);
        } else {
            $qb->orderBy('enc.dateEncaissement', $sortOrder);
        }

        return $qb->getQuery()
                ->getResult();
    }
    
    public function getEncaissementsByProjet(OneProjet $projet, $type, $sort='echeance', $sortOrder='ASC', $q='', $period='all', $startperiod='', $endperiod='') {
        $qb = $this->createQueryBuilder('enc');
        $qb->where('enc.oneProjet = :pid')
                ->setParameter('pid', $projet->getId());
        
        //Recherche mot clé
        if ($q != '' && ($type == 'all' || $type == 'encaissement')) {
            $qb->andWhere($qb->expr()->orX(
                    $qb->expr()->like('enc.code', ':q')
                    ))
                    ->setParameter(':q', '%'.$q.'%');
        }
        
        //Période
        if ($period != 'all' && ($type == 'all' || $type == 'encaissement')) {
            if ($startperiod != '' && $endperiod != '') {
                if ($sort == 'datecreation') {
                    $qb->andWhere($qb->expr()->gte('CAST(enc.creeLe AS DATE)', ':startperiod'));
                    $qb->andWhere($qb->expr()->lte('CAST(enc.creeLe AS DATE)', ':endperiod'));
                } else {
                    $qb->andWhere($qb->expr()->gte('CAST(enc.dateEncaissement AS DATE)', ':startperiod'));
                    $qb->andWhere($qb->expr()->lte('CAST(enc.dateEncaissement AS DATE)', ':endperiod'));
                }
                $qb->setParameter(':startperiod', \DateTime::createFromFormat('j/m/Y', $startperiod)->format('Y-m-d'));
                $qb->setParameter(':endperiod', \DateTime::createFromFormat('j/m/Y', $endperiod)->format('Y-m-d'));
            }
        }
        
        //Tri
        if ($sort == 'datecreation') {
            $qb->orderBy('enc.creeLe', $sortOrder);
        } else {
            $qb->orderBy('enc.dateEncaissement', $sortOrder);
        }
        
        $encaissements = $qb->getQuery()
                ->getResult();
        
        return $encaissements;
    }
    
    public function getEncaissementsPaiement(Tiers $clientProspect, $excludeIds) {
        //Récupère les encaissement déjà utilisés dans des paiements
        $not = $this->_em
                ->createQueryBuilder()
                ->select('IDENTITY(pd.oneEncaissement)')
                ->from('AppBundle:OnePaiementDetail', 'pd')
                ->where('pd.oneEncaissement IS NOT NULL');
        
        $qb = $this->createQueryBuilder('enc');
        $qb->where('enc.tiers = :cpid')
                ->setParameter('cpid', $clientProspect->getId());
        
        //Exclue les encaissements déjà utilisé dans des paiement
        $qb->andWhere($qb->expr()->notIn('enc.id', $not->getDQL()));
        
        //Exclue les encaissements déjà choisis
        if($excludeIds != '') {
            $qb->andWhere($qb->expr()->notIn('enc.id', $excludeIds));
        }

        return $qb->getQuery()
                ->getResult();
    }
    
    /**
     * Récupère le dernièr encaissement
     * @return type
     */
    public function getLastCode() {
        try {
            $qb = $this->createQueryBuilder('enc');
            $qb->select('enc.code')
                    ->where($qb->expr()->like('enc.code', ':code'))
                    ->setParameter(':code', 'ENC-%')
                    ->setMaxResults(1)
                    ->orderBy('enc.id', 'DESC');
            $lastCode = $qb
                    ->getQuery()
                    ->getSingleScalarResult();
            return $lastCode;
        } catch (\Doctrine\ORM\NoResultException $ex) {
            return 'ENC-000';
        }
    }

    public function getNextByDate($cid, $date, $exercice) {
        try {
            $qb = $this->createQueryBuilder('enc');
            $qb->where($qb->expr()->eq('enc.tiers', ':cid'))
                ->andWhere($qb->expr()->gte('enc.creeLe', ':date'))
                ->andWhere('enc.exercice = :exercice')
                ->setParameter(':cid', $cid)
                ->setParameter(':date', $date)
                ->setParameter('exercice', $exercice)
                ->orderBy('enc.id');
            return $qb
                ->getQuery()
                ->getResult();
        } catch (\Doctrine\ORM\NoResultException $ex) {
            return false;
        }
    }
}
