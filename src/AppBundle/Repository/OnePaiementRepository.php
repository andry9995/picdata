<?php

namespace AppBundle\Repository;

use AppBundle\Entity\Tiers;
use Doctrine\ORM\EntityRepository;
use AppBundle\Entity\OneClientProspect;
use Doctrine\ORM\Query\Expr\Join;

/**
 * OnePaiementRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class OnePaiementRepository extends EntityRepository
{
    /**
     * @param array $factures
     * @param string $sort
     * @param string $sortOrder
     * @param string $q
     * @param string $period
     * @param string $startperiod
     * @param string $endperiod
     * @return array
     */
    public function getPaiements(array $factures, $sort='echeance', $sortOrder='ASC', $q='', $period='all', $startperiod='', $endperiod='') {
        $qb = $this->createQueryBuilder('paiement');


        $qb->where('paiement.oneVente in (:factures)')
            ->setParameter('factures', array_values($factures));


        //Recherche mot clé
        if ($q != '') {
            $qb->andWhere($qb->expr()->orX(
                $qb->expr()->like('paiement.code', ':q')
            ))
                ->setParameter(':q', '%' . $q . '%');
        }
        
        //Période
        if ($period != 'all') {
            if ($startperiod != '' && $endperiod != '') {

                $qb->innerJoin('paiement.oneVente', 'onevente')
                    ->andWhere('onevente.dateFacture >= :startperiod')
                    ->andWhere('onevente.dateFacture <= :endperiod')
                    ->select('paiement');


                $dateStartArray = explode('/', $startperiod);
                $dateStartPeriode = null;
                if(count($dateStartArray) === 3) {
                    $dateStartPeriode = new \DateTime("$dateStartArray[2]-$dateStartArray[1]-$dateStartArray[0]");
                }

                $dateEndArray = explode('/', $endperiod);
                $dateEndPeriode = null;
                if(count($dateEndArray) === 3) {
                    $dateEndPeriode = new \DateTime("$dateEndArray[2]-$dateEndArray[1]-$dateEndArray[0]");
                }

                $qb->setParameter(':startperiod',$dateStartPeriode);
                $qb->setParameter(':endperiod', $dateEndPeriode);

//                $qb->andWhere($qb->expr()->gte('CAST(paiement.oneVente.dateFacture AS DATE)', ':startperiod'));
//                $qb->andWhere($qb->expr()->lte('CAST(paiement.oneVente.dateFacture AS DATE)', ':endperiod'));
//                $qb->setParameter(':startperiod', \DateTime::createFromFormat('j/m/Y', $startperiod)->format('Y-m-d'));
//                $qb->setParameter(':endperiod', \DateTime::createFromFormat('j/m/Y', $endperiod)->format('Y-m-d'));
            }
        }
        
        //Tri
        if ($sort == 'echeance') {
            $qb->orderBy('paiement.oneVente.dateFacture', $sortOrder);
        } elseif ($sort == 'datevente') {
            $qb->orderBy('paiement.oneVente.dateFacture', $sortOrder);
        }
        
        $paiements = $qb->getQuery()
                ->getResult();
        
        return $paiements;
    }
    
    public function getPaiementsByClient(Tiers $client, $exercice, $sort='echeance', $sortOrder='ASC', $q='', $period='all', $startperiod='', $endperiod='') {
        $qb = $this->createQueryBuilder('paiement')
            ->innerJoin('paiement.oneVente', 'vente');
        
//        $qb->join('AppBundle:OneVente', 'vente', 'WITH', 'vente.id = paiement.oneVente');
//        $qb->where($qb->expr()->eq('vente.tiers', $client->getId()));

        $qb->innerJoin('paiement.oneVente', 'oneVente')
            ->where('oneVente.tiers = :client')
            ->setParameter('client', $client)
            ->andWhere('oneVente.exercice = :exercice')
            ->setParameter('exercice', $exercice);
        
        //Recherche mot clé
        if ($q != '') {
            $qb->andWhere($qb->expr()->orX(
                    $qb->expr()->like('paiement.code', ':q')
                    ))
                    ->setParameter(':q', '%'.$q.'%');
        }
        
        //Période
        if ($period !== 'all') {
            if ($startperiod != '' && $endperiod != '') {

                $qb->andWhere('paiement.oneVente >= :startperiod');
                $qb->andWhere('paiement.oneVente <= :endperiod');

                $dateStartArray = explode('/', $startperiod);
                $dateStartPeriode = null;
                if(count($dateStartArray) === 3) {
                    $dateStartPeriode = new \DateTime("$dateStartArray[2]-$dateStartArray[1]-$dateStartArray[0]");
                }

                $dateEndArray = explode('/', $endperiod);
                $dateEndPeriode = null;
                if(count($dateEndArray) === 3) {
                    $dateEndPeriode = new \DateTime("$dateEndArray[2]-$dateEndArray[1]-$dateEndArray[0]");
                }

                $qb->setParameter(':startperiod',$dateStartPeriode);
                $qb->setParameter(':endperiod', $dateEndPeriode);
            }
        }
        
        //Tri
        if ($sort === 'echeance' ) {
            $qb->orderBy('vente.dateFacture', $sortOrder);
        } elseif ($sort === 'datevente') {
            $qb->orderBy('vente.dateFacture', $sortOrder);
        }

        return $qb->getQuery()
                ->getResult();
    }
    
    /**
     * Récupère le dernièr encaissement
     * @return type
     */
    public function getLastCode() {
        try {
            $qb = $this->createQueryBuilder('enc');
            $qb->select('enc.code')
                    ->where($qb->expr()->like('enc.code', ':code'))
                    ->setParameter(':code', 'ENC-%')
                    ->setMaxResults(1)
                    ->orderBy('enc.id', 'DESC');
            $lastCode = $qb
                    ->getQuery()
                    ->getSingleScalarResult();
            return $lastCode;
        } catch (\Doctrine\ORM\NoResultException $ex) {
            return 'ENC-000';
        }
    }

    public function getNextByDate($client, $date) {
        try {
            $qb = $this->createQueryBuilder('paiement');

            $qb->join('AppBundle:OneVente', 'vente', 'WITH', 'vente.id = paiement.oneVente');
            $qb->where($qb->expr()->eq('vente.tiers', $client->getId()));

            $qb->andWhere($qb->expr()->gte('paiement.dateReception', ':date'))
                ->setParameter(':date', $date)
                ->orderBy('paiement.id');
            $next = $qb
                ->getQuery()
                ->getResult();
            return $next;
        } catch (\Doctrine\ORM\NoResultException $ex) {
            return false;
        }
    }
}
